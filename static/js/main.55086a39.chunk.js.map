{"version":3,"sources":["factories/Gameboard.js","factories/Ship.js","factories/Player.js","components/Game.js","components/Header.js","App.js","index.js"],"names":["Gameboard","board","validPos","ship","row","col","vertical","length","i","obj","createBoard","j","updatedBoard","shipPos","receiveAttack","attack","attacked","allSunk","allDestroyed","filter","shipHealth","Ship","id","damage","x","sunkStatus","compDisplay","hit","Player","player","computerAttempts","validShot","playerBoard","computerAttack","Math","floor","random","Game","compBoard","computer","useReducer","forceUpdate","game","useRef","useState","setCompDisplay","playerDisplay","setPlayerDisplay","playerWin","setPlayerWin","computerWin","setComputerWin","playerShipYard","forEach","placePlayerShips","value","placeCompShips","gameRound","clickedRow","clickedCol","updateCompBoardDisplay","setTimeout","updatePlayerBoardDisplay","useEffect","handleClick","e","boardTile","target","classList","boardItem","innerHTML","parseInt","dataset","parentElement","current","document","addEventListener","removeEventListener","old","map","display","refreshPage","window","location","reload","className","data-id","onClick","shuffled","Header","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.55086a39.chunk.js","sourcesContent":["const Gameboard = () => {\n  let board = [];\n  let updatedBoard;\n\n  const createBoard = () => {\n    for (var i = 0; i < 10; i++) {\n      board[i] = [];\n      for (var j = 0; j < 10; j++) {\n        board[i][j] = \"\";\n      }\n    }\n    return obj.board;\n  };\n\n  const shipPos = (ship, row, col) => {\n    let updatedBoard = board;\n    if (!validPos(ship, row, col)) {\n      return false;\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        if (ship.vertical === true) {\n          board[row + i][col] = ship;\n        } else {\n          board[row][col + i] = ship;\n        }\n      }\n      return updatedBoard;\n    }\n  };\n\n  const validPos = (ship, row, col) => {\n    if (\n      (ship.vertical && row + ship.length > 10) ||\n      (!ship.vertical && col + ship.length > 10)\n    ) {\n      return false;\n    }\n    for (let i = 0; i < 10; i++) {\n      if (ship.vertical === true && board[row + i][col] !== \"\") {\n        return false;\n      } else if (board[row][col + i] !== \"\") {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n\n  const receiveAttack = (row, col) => {\n    let attack = board[row][col];\n    if (attack.ship === \"☐\") {\n      attack.attacked(true);\n      board[row][col] = \"☠\";\n    } else if (attack === \"\") {\n      board[row][col] = \"o\";\n    } else {\n    }\n  };\n\n  const allSunk = () => {\n    let allDestroyed = false;\n    for (let i = 0; i < 10; i++) {\n      let boardRow = board[i];\n      let allShips = boardRow.filter((ship) => ship.shipHealth > 0);\n      let shipsAlive = allShips.length;\n      if (shipsAlive > 0) {\n        allDestroyed = true;\n      }\n    }\n    if (!allDestroyed) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const obj = {\n    board,\n    createBoard,\n    updatedBoard,\n    shipPos,\n    receiveAttack,\n    allSunk,\n  };\n  return obj;\n};\n\nexport default Gameboard;\n","const Ship = (id, length, vertical) => {\n  let shipHealth = length;\n  let sunkStatus = false;\n  let compDisplay = \" \";\n  let ship = \"☐\";\n\n  const sunk = () => {\n    return (obj.sunkStatus = true);\n  };\n\n  const damage = (x) => {\n    let updatedHealth = (obj.shipHealth -= x);\n    if (updatedHealth <= 0) {\n      sunk();\n    }\n  };\n\n  const attacked = (hit) => {\n    if (hit === true) {\n      damage(1);\n      return true;\n    }\n  };\n  const obj = {\n    id,\n    length,\n    vertical,\n    sunkStatus,\n    shipHealth,\n    compDisplay,\n    ship,\n    attacked,\n  };\n  return obj;\n};\n\nexport default Ship;\n","const Player = (player) => {\n  let computerAttempts = 0; // prevent infinite loop if computer can't make a valid shot.\n\n  const computerAttack = (playerBoard) => {\n    computerAttempts = computerAttempts + 1;\n    if (player === 2) {\n      let row = Math.floor(Math.random() * 10);\n      let col = Math.floor(Math.random() * 10);\n      if (validShot(playerBoard, row, col)) {\n        playerBoard.receiveAttack(row, col);\n      } else if (computerAttempts < 500) {\n        computerAttack(playerBoard);\n      } else {\n        return;\n      }\n    }\n  };\n\n  const validShot = (playerBoard, row, col) => {\n    if (\n      playerBoard.board[row][col] === \"\" ||\n      playerBoard.board[row][col].ship === \"☐\"\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const obj = { computerAttack};\n\n  return obj;\n};\n\nexport default Player;\n","import React, { useEffect, useState, useRef, useReducer } from \"react\";\nimport \"../styles/Game.css\";\nimport Gameboard from \"../factories/Gameboard\";\nimport Ship from \"../factories/Ship\";\nimport Player from \"../factories/Player\";\n\nconst Game = () => {\n  const playerBoard = Gameboard();\n  playerBoard.createBoard();\n  const compBoard = Gameboard();\n  compBoard.createBoard();\n  const computer = Player(2);\n\n  const [, forceUpdate] = useReducer((x) => x + 1, 0);\n  const game = useRef(false);\n\n  const [compDisplay, setCompDisplay] = useState(compBoard.board);\n  const [playerDisplay, setPlayerDisplay] = useState(playerBoard.board);\n  const [playerWin, setPlayerWin] = useState(false);\n  const [computerWin, setComputerWin] = useState(false);\n\n  const playerShipYard = () => {\n    const playerDestroyer = Ship(1, 2, false);\n    const playerSubmarine = Ship(2, 3, true);\n    const playerCruiser = Ship(3, 3, false);\n    const playerBattleShip = Ship(4, 4, false);\n    const playerCarrier = Ship(5, 5, true);\n    let playerYard = [\n      playerDestroyer,\n      playerSubmarine,\n      playerCruiser,\n      playerBattleShip,\n      playerCarrier,\n    ];\n    playerYard.forEach(placePlayerShips);\n  };\n\n  const placePlayerShips = (value) => {\n    let row = Math.floor(Math.random() * 10);\n    let col = Math.floor(Math.random() * 10);\n    if (playerBoard.shipPos(value, row, col)) {\n      return;\n    } else {\n      placePlayerShips(value);\n    }\n  };\n\n  const compShipYard = () => {\n    const compDestroyer = Ship(6, 2, true);\n    const compSubmarine = Ship(7, 3, true);\n    const compCruiser = Ship(8, 3, false);\n    const compBattleShip = Ship(9, 4, false);\n    const compCarrier = Ship(10, 5, false);\n    let compYard = [\n      compDestroyer,\n      compSubmarine,\n      compCruiser,\n      compBattleShip,\n      compCarrier,\n    ];\n    compYard.forEach(placeCompShips);\n  };\n\n  const placeCompShips = (value) => {\n    let row = Math.floor(Math.random() * 10);\n    let col = Math.floor(Math.random() * 10);\n    if (compBoard.shipPos(value, row, col)) {\n      return;\n    } else {\n      placeCompShips(value);\n    }\n  };\n\n  //load ships on board at start\n  playerShipYard();\n  compShipYard();\n\n  const shufflePlayerBoard = () => {\n    playerBoard.createBoard();\n    playerShipYard();\n    let shuffled = playerBoard.board;\n    setPlayerDisplay(\n      shuffled.map((display) => {\n        return display;\n      })\n    );\n  };\n\n  const computerTurn = () => {\n    setTimeout(function () {\n      computer.computerAttack(playerBoard);\n      updatePlayerBoardDisplay();\n    }, 700);\n  };\n\n  const startGame = () => {\n    game.current = true;\n    forceUpdate();\n  };\n\n  const gameRound = (clickedRow, clickedCol) => {\n    compBoard.receiveAttack(clickedRow, clickedCol);\n    updateCompBoardDisplay();\n    if (compBoard.allSunk()) {\n      setPlayerWin(true);\n    } else if (playerBoard.allSunk()) {\n      setComputerWin(true);\n    } else {\n      computerTurn();\n    }\n  };\n\n  useEffect(() => {\n    const handleClick = (e) => {\n      let boardTile = e.target.classList.value;\n      let boardItem = e.target.innerHTML;\n      let clickedCol = parseInt(e.target.dataset.id);\n      let clickedRow = parseInt(e.target.parentElement.dataset.id);\n      if (\n        game.current &&\n        boardTile === \"comp-col\" &&\n        boardItem !== \"☠\" &&\n        boardItem !== \"o\"\n      ) {\n        gameRound(clickedRow, clickedCol);\n      }\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const updateCompBoardDisplay = () => {\n    let old = [...compDisplay];\n    setCompDisplay(\n      old.map((display) => {\n        return display;\n      })\n    );\n  };\n\n  const updatePlayerBoardDisplay = () => {\n    let old = [...playerDisplay];\n    setPlayerDisplay(\n      old.map((display) => {\n        return display;\n      })\n    );\n  };\n\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"boards\">\n        <div className=\"user-board-ctn\">\n          <h1>Player's Board</h1>\n          {playerDisplay.map((row, i) => (\n            <div className=\"user-row\" data-id={i} key={i}>\n              {row.map((col, j) => (\n                <span\n                  data-id={j}\n                  id={col.id ? col.id : null}\n                  className=\"user-col\"\n                  key={j}\n                >\n                  {col.ship ? col.ship : col}\n                </span>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          {!game.current && (\n            <div className=\"button-ctn\">\n              <button onClick={startGame}>Start</button>\n              <button onClick={shufflePlayerBoard}>Shuffle Ships</button>\n            </div>\n          )}\n          {computerWin && (\n            <div className=\"button-ctn\">\n              <div className=\"winner\">Computer Wins!</div>\n              <button onClick={refreshPage}>Reset</button>\n            </div>\n          )}\n          {playerWin && (\n            <div className=\"button-ctn\">\n              <div className=\"winner\">User Wins!</div>\n              <button onClick={refreshPage}>Reset</button>\n            </div>\n          )}\n        </div>\n        <div className=\"comp-board-ctn\">\n          <h1>Computer's Board</h1>\n          {compDisplay.map((row, i) => (\n            <div data-id={i} className=\"comp-row\" key={i}>\n              {row.map((col, j) => (\n                <span\n                  data-id={j}\n                  id={col.id ? col.id : null}\n                  className=\"comp-col\"\n                  key={j}\n                >\n                  {col.compDisplay ? col.compDisplay : col}\n                </span>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport \"../styles/Header.css\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>BATTLESHIP</h1>\n    </header>\n  );\n}\n\nexport default Header;","import './styles/App.css';\nimport Game from './components/Game'\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div><Header /></div>\n      <div>< Game/></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}